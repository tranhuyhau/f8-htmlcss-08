@use 'sass:math';
@use 'sass:map';

$grid-breakpoints: (
    xxl: 1400px,
    xl: 1200px,
    lg: 992px,
    md: 768px,
    sm: 576px,
);

$container-max-widths: (
    sm: 100%,
    md: 540px,
    lg: 720px,
    xl: 960px,
    xxl: 1140px,
);

$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);

$number-columns: 12;
$gutter-width: 30px;

%gutter-padding {
    padding-left: calc(var(--gutter-x) * 0.5);
    padding-right: calc(var(--gutter-x) * 0.5);
}

.container-fluid {
    --gutter-x: #{$gutter-width};
    --gutter-y: 0;

    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container {
    @extend .container-fluid;
    max-width: 1340px;
    padding-left: 0;
    padding-right: 0;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--gutter-y) * -1);
    margin-left: calc(var(--gutter-x) * 0.5 * -1);
    margin-right: calc(var(--gutter-x) * 0.5 * -1);

    > * {
        margin-top: var(--gutter-y);
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
    width: 100%;
}

@mixin make-media($breakpoint) {
    @media screen and (max-width: ($breakpoint - 0.02)) {
        @content;
    }
}

@mixin make-row-columns($infix: null) {
    @for $i from 1 through $number-columns * 0.5 {
        .row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

@mixin make-columns($infix: null) {
    @for $i from 1 through $number-columns {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: math.div(100%, $number-columns) * $i;
        }
    }
}

@mixin make-offset($infix: null) {
    @for $i from 0 to $number-columns {
        .offset#{$infix}-#{$i} {
            margin-left: math.div(100%, $number-columns) * $i;
        }
    }
}

@mixin make-gutter($infix: null) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i},
        .gx#{$infix}-#{$i} {
            --gutter-x: #{$gutter-width * $ratio};
        }

        .g#{$infix}-#{$i},
        .gy#{$infix}-#{$i} {
            --gutter-y: #{$gutter-width * $ratio};
        }
    }
}

@include make-row-columns();

@include make-columns();

@include make-offset();

@include make-gutter();

@each $size, $breakpoint in $grid-breakpoints {
    $max-width: map.get(
        $map: $container-max-widths,
        $key: $size,
    );
    $infix: '-#{$size}';

    @include make-media($breakpoint) {
        .container {
            max-width: $max-width;
            @if $size == 'sm' {
                padding-left: calc(var(--gutter-x) * 0.5);
                padding-right: calc(var(--gutter-x) * 0.5);
            }
        }

        @include make-row-columns($infix);

        @include make-columns($infix);

        @include make-offset($infix);

        @include make-gutter($infix);
    }
}
